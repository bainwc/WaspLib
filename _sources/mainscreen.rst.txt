
MainScreen
====
Methods to interact with the MainScreen.


------------

ObjectFinder.Unlimit
~~~~~~~~~~~~~~~~~~~~
.. code-block:: pascal

 procedure TRSObjectFinder.Unlimit;

Resets ObjectFinder size limits


------------

ObjectFinder.Unlimited
~~~~~~~~~~~~~~~~~~~~~~
.. code-block:: pascal

 function TRSObjectFinder.Unlimited: TRSObjectFinder;

Returns a copy of the ObjectFinder with the size limits removed.


------------

MainScreen.IsVisible
~~~~~~~~~~~~~~~~~~~~
.. code-block:: pascal


  function TRSMainScreen.IsVisible(p: TPoint): Boolean; override;
  function TRSMainScreen.IsVisible(tpa: TPointArray; useCenter: Boolean = True): Boolean; overload;
  function TRSMainScreen.IsVisible(b: TBox; useCenter: Boolean = True): Boolean; overload;
  function TRSMainScreen.IsVisible(rect: TRectangle; useCenter: Boolean = True): Boolean; overload;
  function TRSMainScreen.IsVisible(cuboid: TCuboidEx; useCenter: Boolean = True): Boolean; overload;

Checks if the given TPoint, TPointArray, TBox, TRectangle or TCuboid is visible in the MainScreen.
It will return true if it's not behind an interface otherwise returns false.

Example
-------
.. code-block:: pascal  

  Writeln MainScreen.IsVisible(P);


------------

MainScreen.Filter
~~~~~~~~~~~~~~~~~
.. code-block:: pascal


  function TRSMainScreen.Filter(tpa: TPointArray): TPointArray;
  function TRSMainScreen.Filter(boxArray: TBoxArray): TBoxArray; overload;
  function TRSMainScreen.Filter(rectArray: TRectArray): TRectArray; overload;
  function TRSMainScreen.Filter(cuboidArray: TPolyArray): TPolyArray; overload;

Filters the given TPointArray, TBoxArray, TRectArray or TCuboidArray and returns only those that are visible in the MainScreen.


------------

MainScreen.FilterInPolygon
~~~~~~~~~~~~~~~~~~~~~~~~~~
.. code-block:: pascal


  function TRSMainScreen.FilterInPolygon(tpa, polygon: TPointArray): TPointArray;
  function TRSMainScreen.FilterInPolygon(atpa: T2DPointArray; polygon: TPointArray): T2DPointArray; overload;

Filters the given TPointArray or T2DPointArray and returns only those that are visible within a polygon on the mainScreen.


------------

MainScreen.GetAdjacentTiles
~~~~~~~~~~~~~~~~~~~~~~~~~~~
.. code-block:: pascal

 function TRSMainScreen.GetAdjacentTiles: TRectArray;

Returns the 4 tiles adjacent to the player in form of a TRectArray.


------------

MainScreen.DebugAdjacentTiles
~~~~~~~~~~~~~~~~~~~~~~~~~~~
.. code-block:: pascal

 procedure TRSMainScreen.DebugAdjacentTiles;

Debugs MainScreen.GetAdjacentTiles.

Example
-------
.. code-block:: pascal  

  MainScreen.DebugAdjacentTiles;


------------

MainScreen.InMultiCombat
~~~~~~~~~~~~~~~~~~~~~~~~~~~
.. code-block:: pascal

 function TRSMainScreen.InMultiCombat: Boolean;

Returns true if we are in multi combat false if not.

Example
-------
.. code-block:: pascal  

  Writeln MainScreen.InMultiCombat;


------------

MainScreen.FindGrave
~~~~~~~~~~~~~~~~~~~~~~~~~~~
.. code-block:: pascal

 function TRSMainScreen.FindGrave: Boolean;

Returns true if we died and there's a grave available somewhere, false otherwise.

Example
-------
.. code-block:: pascal  

  Writeln MainScreen.FindGrave;


------------

MainScreen.LoadingPOH
~~~~~~~~~~~~~~~~~~~~~~~~~~~
.. code-block:: pascal

 function TRSMainScreen.LoadingPOH: Boolean;

Returns true if we are loading a poh.

Example
-------
.. code-block:: pascal  

  Writeln MainScreen.LoadingPOH;


------------

MainScreen.WaitLoadingPOH
~~~~~~~~~~~~~~~~~~~~~~~~~
.. code-block:: pascal

 function TRSMainScreen.WaitLoadingPOH: Boolean;

Waits for the POH loading screen returns true if we find a loading screen and successfully wait for it to finish.

Example
-------
.. code-block:: pascal  

  Writeln MainScreen.WaitLoadingPOH;


------------

MainScreen.FindEnemyHitsplats
~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
.. code-block:: pascal

 function TRSMainScreen.FindEnemyHitsplats(): Boolean;

Returns the hitsplats on screen that don't belong to the player.

Example
-------
.. code-block:: pascal  

  Debug(MainScreen.FindEnemyHitsplats());


------------

MainScreen.InCombat
~~~~~~~~~~~~~~~~~~~
.. code-block:: pascal

 function TRSMainScreen.InCombat: Boolean;

Returns true if we are currently in combat.
With slow attack speed between you and the enemy this might return false negatives.

Example
-------
.. code-block:: pascal  

  Writeln MainScreen.InCombat;


------------

MainScreen.WaitInCombat
~~~~~~~~~~~~~~~~~~~~~~~
.. code-block:: pascal

 function TRSMainScreen.WaitInCombat(waitTime: Int32; interval: Int32 = -1): Boolean;

Waits the specified **waitTime** until we are in combat.

Example
-------
.. code-block:: pascal  

  MainScreen.WaitInCombat(5000);


------------

MainScreen.WaitNotInCombat
~~~~~~~~~~~~~~~~~~~~~~~~~~
.. code-block:: pascal

 function TRSMainScreen.WaitNotInCombat(waitTime: Int32; interval: Int32 = -1): Boolean;

Waits the specified **waitTime** until we are nto in combat.

Example
-------
.. code-block:: pascal  

  MainScreen.WaitNotInCombat(5000);


------------

MainScreen.FindArrow
~~~~~~~~~~~~~~~~~~~~
.. code-block:: pascal

 function TRSMainScreen.FindArrow(out TPA: TPointArray): Boolean;
.. code-block:: pascal

 function TRSMainScreen.FindArrow: Boolean; overload;

Returns true if there's a yellow arrow on screen.
If a TPointArray is passed as a parameter it will return with the location of the arrow tip.

Example
-------
.. code-block:: pascal  

  Writeln MainScreen.FindArrow;


------------

MainScreen.WaitArrow
~~~~~~~~~~~~~~~~~~~~
.. code-block:: pascal


  function TRSMainScreen.WaitArrow(TPA: TPointArray; WaitTime: Int32 = 600; Interval: Int32 = -1): Boolean;
  function TRSMainScreen.WaitArrow(WaitTime: Int32 = 600; Interval: Int32 = -1): Boolean;

Waits **WaitTime** for a yellow arrow to appear on MainScreen.
If a TPointArray is passed as a parameter it will return with the location of the arrow tip.

Example
-------
.. code-block:: pascal  

  Writeln MainScreen.WaitArrow;


------------
